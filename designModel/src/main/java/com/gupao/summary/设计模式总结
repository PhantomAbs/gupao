创建型：
    工厂：
		预先定义好类型的创建细节，用于对象的创建。(因而工厂模式是单例的，并且方便扩展)
	抽象工厂：
		创建多个相关或依赖的对象的工厂方法（因而由工厂模式来实现）
    单例：
		顾名思义，任何情况下都是只有一个实例的设计模式
    原型：
		复制对象的值来创建新对象（对象的引用属性需要考虑深浅复制）
		与工厂模式区别？
结构型：
    代理：
		对代理类的增强（注重于扩展）与控制对代理对象的访问
    装饰：
		不改变原对象的基础上增加附加功能（满足 is A）
		与代理区别：
		    装饰注重扩展，实例作为构造函数传入;
		    代理注重访问限制，过程中会创建代理对象
    适配器：
		字面意思，就是对已完工的类的扩展（可已继承的形式,满足has A)
		与装饰区别：
			is/has，so 装饰(注重覆盖，扩展)可视为特殊的适配器(注重兼容)
行为型：
    策略：
		互相可替代的算法间执行哪个的控制方法
    模板：
		固化流程后，通用部分提取交与父类，子类继承不能覆写则父类通用的为模板方法
    观察者：
		监听器